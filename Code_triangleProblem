# import tkinter as tk
import numpy as np 
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


def area(ax,ay,bx,by,cx,cy):
	A = float(ax*(by-cy)+bx*(cy-ay)+cx*(ay-by))
	A = A / 2.0
	return abs(A)

def isinside(ax,ay,bx,by,cx,cy,x,y):
	A = area(ax,ay,bx,by,cx,cy)
	A1 = area(ax,ay,bx,by,x,y)
	A2 = area(ax,ay,cx,cy,x,y)
	A3 = area(bx,by,cx,cy,x,y)
	B = A1 + A2 + A3
	if A == B:
		return True
	else:
		return False

def check_point():
    x1, y1, x2, y2, x3, y3 = float(x1_input.get()), float(y1_input.get()), float(x2_input.get()), float(y2_input.get()), float(x3_input.get()), float(y3_input.get())
    x, y = float(x_input.get()), float(y_input.get())

    if isinside(x1, y1, x2, y2, x3, y3, x, y):
        result_text = "THE GIVEN POINT IS INSIDE THE TRIANGLE"
    else:
        result_text = "THE GIVEN POINT IS OUTSIDE THE TRIANGLE"
        
    fig, ax = plt.subplots()
    ax.plot([x], [y], 'r*')
    ax.plot([x1, x2, x3, x1], [y1, y2, y3, y1])

    new_window = tk.Toplevel(root)
    new_window.title("Triangle Point Checker")

    result_label = tk.Label(new_window, text=result_text)
    result_label.pack(side=tk.TOP, padx=10, pady=10)

    canvas = FigureCanvasTkAgg(fig, master=new_window)
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    canvas.draw()

    

# Create the main window
root = tk.Tk()
root.title("Triangle Point Checker")

# Create the input frame
input_frame = tk.Frame(root)
input_frame.pack(side=tk.TOP, padx=5, pady=5)


# Create the input frame
input_frame = tk.Frame(root)
input_frame.pack(padx=5, pady=5)
root.title("My New Window")
root.geometry("700x700")


# Create the plot frame
plot_frame = tk.Frame(root)
plot_frame.pack(side=tk.TOP, padx=5, pady=5)

# Create a label for the plot
#plot_label = tk.Label(plot_frame, text="Triangle Plot")
#plot_label.pack(padx=5, pady=5)

# Create a canvas to display the plot
canvas = tk.Canvas(plot_frame)
canvas.pack(side=tk.BOTTOM, padx=5, pady=5)


result_label = tk.Label(plot_frame, text="")
result_label.pack(side=tk.TOP, padx=10, pady=10)



# Create the x1 input label and entry
x1_label = tk.Label(input_frame, text="x1:")
x1_label.grid(row=0, column=0, sticky="W")
x1_input = tk.Entry(input_frame)
x1_input.grid(row=0, column=1)

# Create the y1 input label and entry
y1_label = tk.Label(input_frame, text="y1:")
y1_label.grid(row=1, column=0, sticky="W")
y1_input = tk.Entry(input_frame)
y1_input.grid(row=1, column=1)

# Create the x2 input label and entry
x2_label = tk.Label(input_frame, text="x2:")
x2_label.grid(row=2, column=0, sticky="W")
x2_input = tk.Entry(input_frame)
x2_input.grid(row=2, column=1)

# Create the y2 input label and entry
y2_label = tk.Label(input_frame, text="y2:")
y2_label.grid(row=3, column=0, sticky="W")
y2_input = tk.Entry(input_frame)
y2_input.grid(row=3, column=1)

# Create the x3 input label and entry
x3_label = tk.Label(input_frame, text="x3:")
x3_label.grid(row=4, column=0, sticky="W")
x3_input = tk.Entry(input_frame)
x3_input.grid(row=4, column=1)

# Create the y3 input label and entry
y3_label = tk.Label(input_frame, text="y3:")
y3_label.grid(row=5, column=0, sticky="W")
y3_input = tk.Entry(input_frame)
y3_input.grid(row=5, column=1)


# Create the x input label and entry
x_label = tk.Label(input_frame, text="x:")
x_label.grid(row=6, column=0, sticky="W")
x_input = tk.Entry(input_frame)
x_input.grid(row=6, column=1)

# Create the y input label and entry
y_label = tk.Label(input_frame, text="y:")
y_label.grid(row=7, column=0, sticky="W")
y_input = tk.Entry(input_frame)
y_input.grid(row=7, column=1)

#create result label
button1 = tk.Button(root, text="enter", command=check_point)
button1.pack(side=tk.TOP, padx=0.5, pady=0.5)


root.mainloop()
